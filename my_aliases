# focus on specific tasks...
#alias focus="cd ~/dev/ruby/lmpm"
#alias focus="cd ~/dev/rails/"
alias f="cd ~/dev/rails/xpd3"
#alias focus="cd ~/dev/cpp/ruby_one_click"
#alias focus="cd ~/dev/rails/ruby_reloaded"




#############
# Developer #
#############

# instant web server in the current directory
#python -m SimpleHTTPServer
# this is so clever...  ruby -r un requires the 'un' library... which
# provides the command 'httpd' which is a wrapper for using weBrick
alias rhttp='rvmsudo ruby -run -e httpd .'

alias r='rails'
# To properly test, make sure you're running 'spork' in another terminal window
alias test='bundle exec rspec --drb spec/'
alias bundle-install='bundle install --without development test'
alias be='bundle exec'
alias ber='bundle exec rake'

###
# Git Stuff
###
# Basics:
alias gis="git status"
alias ga="git add -au" # adds all files and removed files to staging
alias gcm="git commit -m"
# Git Root:  Go to the root of the project directory
alias gr='cd "$(git rev-parse --show-toplevel)"'
alias gpl='git pull origin' 
alias gps='git push origin'
alias vilocalignor='vi .git/info/exclude' # a .gitignore that isn't shared on the public repo

alias gundo-last-commit-retain-progress='git stash && git reset --hard && git stash pop'
alias gundo-commit-on-remote='git push origin :master'

# Monitoring:
alias gsnm='git branch --no-merged'  # view branches that still need to be merged
# graphical commit history/log
alias glg="git log --branches --tags --graph --oneline --decorate"
alias gdf="git diff"
alias gdfh="git diff HEAD"

# Research:
alias gdump="git log --oneline -p > /tmp/git/huge" # dump out contents of every file at each commit.  Allows searching 
alias gago="git whatchanged --since='1 year ago'" # Looks at the diff since a year ago
ghp() { git checkout $(git rev-list HEAD..master | tail -n 1); } #incriment HEAD, the opposit of git checkout HEAD^
alias ghm="git checkout HEAD^"  # Git Head Minus 



# delete file from git repo without deleting
# git rm --cached mylogfile.log

# Ammend git commits (reuse the commit message for additional changes) by this
# $  git commit --allow-empty -m "cool message"
# $  git commit -a --amend

# hub aliases
alias hubshow='cat ~/.config/hub'
alias hubclear='rm ~/.config/hub'
alias hubmk='hub create' # creates a remote repo

#mongodb aliases
alias mongoshell="mongo --shell --host $MONGODB_DEVELOPMENT_HOST --port $MONGODB_DEVELOPMENT_PORT -u $MONGODB_DEVELOPMENT_USERNAME -p $MONGODB_DEVELOPMENT_PASSWORD $MONGODB_DEVELOPMENT_DB"

##############
# Linux user #
##############
# Package Maintenance
alias latest-installs='grep " install " /var/log/dpkg.*'
alias latest-upgrades='grep " upgrade " /var/log/dpkg.*'
alias latest-removes='grep " remove " /var/log/dpkg.*'

# http://ubuntuforums.org/showthread.php?t=564301
use-network-apt-cacher() { echo 'Acquire::http::Proxy "http://hostname:3142";' | sudo tee /etc/apt/apt.conf.d/01proxy; }
use-direct-apt-querying() { echo 'Acquire::http::Proxy "http://";' | sudo tee /etc/apt/apt.conf.d/01proxy; }

# Service management
alias s='sudo service'


# Get Gateway
# netstat -rn | grep -e '^0\.0\.0\.0 \s*[0-9]*\.[0-9]*\.[0-9]\.[0-9].*[ew].*[0-9]*$' |awk '{print $2}'
get-gateway() { netstat -rn | grep -e '^0\.0\.0\.0 \s*[0-9]*\.[0-9]*\.[0-9]\.[0-9].*[ew].*[0-9]*$' |awk '{print $2}'; }


# Backups
alias sync-files-to-backup="rsync -avrh /media/kentos/f39c6a7b-0c94-4489-953b-dccb16f1037c/home/john john@192.168.0.56:/storage/backups/2014-9-19-bops-part/home/john"

# File System
fs-rename-files-to-linux-style() {
  ls | while read -r FILE
  do
    mv -v "$FILE" `echo $FILE | tr ' ' '_' | tr -d '[{}(),\!]' | tr -d "\'" | tr '[A-Z]' '[a-z]' | sed 's/_-_/_/g'`
    done ;
}



############
# sysadmin #
############

# Define a bash function 
say-hello() { echo "hello ${1}" ;}


# Database
# http://stackoverflow.com/questions/6861355/mysqldump-launched-by-cron-and-password-security
# Pass in username and name of database to dump
mysql-backup() { mysqldump -u ${1} -p ${2} > ${2}.sql; }

# Pass in Username and database name
# Run in folder with a *.sql file, database name must equal .sql file's name too...
mysql-restore() { 
  stty -echo;
  read -p "Password: " passw; echo
  stty echo;
  mysql-temp-store-pw ${1} $passw
  # if mysql --defaults-extra-file=mysql_helper_from_script$$ -e "create database ${2}" ; then 
  if mysql -u${1} -p"$passw" -e "create database ${2}" ; then
    echo "created new db"
  else
    read -p "Delete existing database? [y,n]", should_delete_db
    if [ $should_delete_db == "y" ] ; then
      mysql -u${1} -p"$passw" -e "drop database ${2};create database ${2}"
      #mysql --defaults-extra-file=mysql_helper_from_script -e "drop database ${2}" &&
      #mysql --defaults-extra-file=mysql_helper_from_script -e "create database ${2}" 
    else
      echo "No Action Performed"
      return 1
      #exit 1
    fi
  fi

  mysql -u${1} -p"$passw" ${2} < ${2}.sql; 
  #mysql --defaults-extra-file=mysql_helper_from_script < ${2} < ${2}.sql

  #mysql -u${1} -p -e "create database ${2}" &&
  #mysql -u${1} -p ${2} < ${2}.sql; 
  mysql-temp-clear-pw
}

mysql-rm-database() { mysql -u${1} -p -e "drop database ${2}"; }

mysql-temp-store-pw() { echo -e "[client]\nuser=${1}\npassword=${2}" > mysql_helper_from_script$$; }
mysql-temp-clear-pw() { rm mysql_helper_from_script$$; }

# Linux specific aliases
alias latest-installs='grep " install " /var/log/dpkg.*'
alias latest-upgrades='grep " upgrade " /var/log/dpkg.*'
alias latest-removes='grep " remove " /var/log/dpkg.*'

# Email Related
# http://forums.cpanel.net/f5/strange-bandwidth-usage-user-pop3-100161.html
# Get's a picture of how much data this user is downloading in there mail per 3 days or so
# grep user-name@domain.com /var/log/maillog | grep retr= | awk {'print $7" "$1" "$2" "$3" "$11'} | grep -v retr=0
scan-mail() { grep user-name@domain.com /var/log/maillog | grep retr= | awk {'print $7" "$1" "$2" "$3" "$11'} | grep -v retr=0; }
#alias scan-mail="grep user-name@domain-name.com /var/log/maillog | grep retr= | awk {'print $7\" \"$1\" \"$2\" \"$3\" \"$11'} | grep -v retr=0"
# This one sums all the bytes 
#grep domain-name.net /var/log/maillog* | grep retr= | grep -v retr=0 | awk {'print $11'} | cut -d, -f1 | cut -d= -f2 | awk '{t += $1} END { print "total: ", t, " bytes transferred over POP3"}'
# pass in domain.com as parameter
scan-mail-sum() { grep 1 /var/log/maillog* | grep retr= | grep -v retr=0 | awk {'print $11'} | cut -d, -f1 | cut -d= -f2 | awk '{t += $1} END { print "total: ", t, " bytes transferred over POP3"}'; }



